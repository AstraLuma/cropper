#!/usr/bin/python
#-*- coding: utf-8 -*-
"""
cropper [file]

An app to easily crop an image into multiple pieces.
"""
from __future__ import with_statement, division, absolute_import
import pygtk
pygtk.require('2.0')
import gtk, gobject
#gtk.gdk.threads_init()
#gobject.threads_init()
import gtk.glade, pango
from glade import GladeWindow, resource
from box import Box
from boxmodel import BoxListStore
from imagespace import ImageSpace
from actor import Actor, action
from optparse import OptionParser

parser = OptionParser()
#parser.add_option("-f", "--file", dest="filename",
#                  help="write report to FILE", metavar="FILE")
#parser.add_option("-q", "--quiet",
#                  action="store_false", dest="verbose", default=True,
#                  help="don't print status messages to stdout")

def permIter(seq):
	"""
	Given some sequence 'seq', returns an iterator that gives
	all permutations of that sequence.
	"""
	# http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/105962
	## Base case
	if len(seq) == 1:
		yield seq[0]
	else:
		## Inductive case
		for i in range(len(seq)):
			element_slice = seq[i:i+1]
			rest_iter = permIter(seq[:i] + seq[i+1:])
			for rest in rest_iter:
				yield element_slice + rest


class Cropper(GladeWindow, Actor):
	window = property(lambda self: self.wCropper)
	def __init__(self, options, args, *pargs, **kwargs):
		print 'Cropper.__init__()'
		self.model = BoxListStore()
		self.model.exist_image = 'gtk-file'
		self.model.no_exist_image = 'gtk-cancel'
		
		self.tvAreas.set_model(self.model)
		
		self.isImage = ImageSpace(model=self.model, box=1)
		self.isImage.next_color = gtk.gdk.color_parse('#A0F')
		self.isImage.connect('box-added', self.on_box_added)
#		self.isImage.connect('insert-box-changed', self.on_insert_box_changed)
		self.swImage.add_with_viewport(self.isImage)
		
		self.crpExists = gtk.CellRendererPixbuf()
		self.crtFilename = gtk.CellRendererText()
		self.crtColor = gtk.CellRendererText()
		self.crtColor.set_property('background-set', True)
		self.crtColor.set_property('text', ' ')
		
		self.tvcFile = gtk.TreeViewColumn()
		self.tvcFile.set_sizing(gtk.TREE_VIEW_COLUMN_AUTOSIZE)
		self.tvcFile.pack_start(self.crpExists, False)
		self.tvcFile.set_attributes(self.crpExists, icon_name=10)
		self.tvcFile.pack_start(self.crtFilename, True)
		self.tvcFile.set_attributes(self.crtFilename, text=2)
		self.tvcColor = gtk.TreeViewColumn()
		self.tvcColor.set_sizing(gtk.TREE_VIEW_COLUMN_AUTOSIZE)
		self.tvcColor.pack_start(self.crtColor, True)
		self.tvcColor.set_attributes(self.crtColor, background_gdk=8)
		
		self.tvAreas.append_column(self.tvcFile)
		self.tvAreas.append_column(self.tvcColor)
		self.tvAreas.set_headers_visible(False)
		self.tvAreas.set_tooltip_column(11)
	
	def present(self):
		self.preshow()
		self.wCropper.show_all()
		self.wCropper.present()
	
	def add_box(self, fn, box, color=None):
		if color is not None:
			if isinstance(color, basestring):
				color = gtk.gdk.color_parse(color)
			if not isinstance(box, gtk.gdk.Rectangle):
				box = gtk.gdk.Rectangle(*box)
			box = Box(box, color)
		self.model.append([fn, box])
	
	def get_next_filename(self):
		# TODO: When we have the filename, turn it into a conglamoratation
		return 'test.%i.gif' % len(self.model)
	
	_color_iter = None
	def get_next_color(self, color):
		if self._color_iter is None:
			self._color_iter = (gtk.gdk.color_parse('#'+p) for p in permIter('F0A'))
		try:
			return self._color_iter.next()
		except StopIteration:
			self._color_iter = None
			return self.get_next_color(color)
	
	# Event handlers
	def on_delete_event(self, widget, event):
		gtk.main_quit()
	
	def on_box_added(self, widget, box):
		self.model.append([self.get_next_filename(), box])
		self.isImage.next_color = self.get_next_color(self.isImage.next_color)
	
	# Actions/UI stuff
	PROPS = 'expand', 'fill', 'padding', 'pack-type', 'position'
	def add_menubar(self, menubar):
		props = self.vbContent.child_get(self.mbMenu, *self.PROPS)
		self.vbContent.remove(self.mbMenu)
		self.mbMenu = menubar
		params = []
		for k,v in zip(self.PROPS, props):
			params += [k,v]
		self.vbContent.add_with_properties(self.mbMenu, *params)
	
	def add_toolbar(self, toolbar):
		props = self.vbContent.child_get(self.tbTools, *self.PROPS)
		self.vbContent.remove(self.tbTools)
		self.tbTools = toolbar
		params = []
		for k,v in zip(self.PROPS, props):
			params += [k,v]
		self.vbContent.add_with_properties(self.tbTools, *params)

	__ui__ = """
<ui>
	<menubar>
		<menu action="File">
			<menuitem action="Open" />
			<menuitem action="Crop" />
			<separator/>
			<menuitem action="Quit" />
		</menu>
		<menu action="Edit">
			<!--menuitem action="Undo"/>
			<menuitem action="Redo"/-->
			<separator />
			<menuitem action="Cut"/>
			<menuitem action="Copy"/>
			<menuitem action="Paste"/>
			<menuitem action="Delete"/>
			<menuitem action="Clear"/>
			<separator />
			<menuitem action="EditPreferences"/>
		</menu>
		<menu action="View">
			<menuitem action="ZoomIn" />
			<menuitem action="ZoomOut" />
			<menuitem action="ZoomNormal" />
			<menuitem action="ZoomFit" />
		</menu>
		<menu action="Help">
			<menuitem action="About" />
		</menu>
	</menubar>
	<toolbar action="toolbar">
		<toolitem action="Open"/>
		<toolitem action="Crop"/>
		<separator/>
		<toolitem action="Delete"/>
		<toolitem action="Clear"/>
		<separator/>
		<separator/>
		<toolitem action="Add"/>
		<toolitem action="Select"/>
	</toolbar>
</ui>
"""
	
	@action(stock='cropper-file', image=None, label='_File')
	def File(self): pass
	@action(stock='cropper-edit', image=None, label='_Edit')
	def Edit(self): pass
	@action(stock='cropper-view', image=None, label='_View')
	def View(self): pass
	@action(stock='cropper-help', image=None, label='_Help')
	def Help(self): pass
	
	@action(stock='gtk-open')
	def Open(self, filename=None):
		print 'Open'
		if filename is None:
			# display dialog
			pass
		# Open image
	
	@action(stock='gtk-save', label='Crop')
	def Crop(self):
		print 'Crop'
		pass
	
	@action(stock='gtk-quit')
	def Quit(self):
		print 'Quit'
		pass
	
	@action(stock='gtk-clear')
	def Clear(self):
		print 'Clear'
		pass
	
	@action(stock='gtk-cut')
	def Cut(self):
		print 'Cut'
		pass
	
	@action(stock='gtk-copy')
	def Copy(self):
		print 'Copy'
		pass
	
	@action(stock='gtk-paste')
	def Paste(self):
		print 'Paste'
		pass
	
	@action(stock='gtk-delete')
	def Delete(self):
		print 'Delete'
		pass
	
	@action(stock='gtk-select-all')
	def SelectAll(self):
		pass
	
	@action(stock='gtk-zoom-in')
	def ZoomIn(self):
		pass
	
	@action(stock='gtk-zoom-out')
	def ZoomOut(self):
		pass
	
	@action(stock='gtk-zoom-100')
	def ZoomNormal(self):
		pass
	
	@action(stock='gtk-zoom-fit')
	def ZoomFit(self):
		pass
	
	@action(stock='cropper-flip-horizontal', theme='object-flip-horizontal', label='Flip _Horizontal')
	def FlipHorizontal(self):
		pass
	
	@action(stock='cropper-flip-vertical', theme='object-flip-vertical', label='Flip _Vertical')
	def FlipVertical(self):
		pass
	
	@action(stock='cropper-rotate-right', theme='object-rotate-right', label='Rotate Clockwise', shortlabel='Right')
	def RotateCW(self):
		pass
	
	@action(stock='cropper-rotate-left', theme='object-rotate-left', label='Rotate Counterclockwise', shortlabel='Left')
	def RotateCCW(self):
		pass
	
	@action(stock='gtk-preferences')
	def EditPreferences(self):
		pass
	
#	@action(stock='cropper-auto-shrink', label='Auto Shrink')
#	def AutoShrink(self):
#		pass
	
	@action(stock='gtk-about')
	def About(self):
		dlg = gtk.AboutDialog()
		props = {
			'version': """$Revision$""",
			'name': 'cropper',
			'authors': ['James Bliss <james.bliss@astro73.com>'],
			'copyright': u'\N{COPYRIGHT SIGN} 2008 James Bliss',
			}
		for k,v in props.iteritems():
			dlg.set_property(k,v)
		dlg.run()
		dlg.destroy()
	
	@action(stock='gtk-add', radiogroup='editmode')
	def Add(self):
		self.isImage.mode = ImageSpace.INSERT
	
	@action(stock='cropper-select', radiogroup='editmode', image='drag-resize.png', label='Select', active=True)
	def Select(self):
		self.isImage.mode = ImageSpace.SELECT

if __name__ == '__main__':
	options, args = parser.parse_args()
	app = Cropper(fname=resource('cropper.glade'), root='wCropper', options=options, args=args)
	
#	app.add_box('test1.gif', ( 75,131,354,547), '#F0A')
#	app.add_box('test2.gif', ( 15, 22,467,191), '#AF0')
#	app.add_box('test3.gif', (273, 37,204,712), '#0AF')
#	app.add_box('test4.gif', ( 18,622,470,124), '#0F0')
#	app.add_box('test5.gif', ( 11, 20,178,722), '#00F')
	app.isImage.image=gtk.gdk.pixbuf_new_from_file('test.gif')
	app.isImage.mode = ImageSpace.INSERT
	
	app.wCropper.set_default_size(700, 1000)
	
	# Run
	app.present()
	print "Model data:", map(tuple, app.model)
	gtk.gdk.set_show_events(True)
	gtk.main()
